#include <Rcpp.h>
#include <string>
#include <iostream>
#include "valid.hpp"
#include "search_validation.hpp"

//#define IF_X_IN_RANGE ((predic_x[i] >= (valid_x[j] - 1) && predic_x[i] <= (valid_x[j] + 1)))
//#define IF_Y_IN_RANGE ((predic_y[i] >= (valid_y[j] - 1) && predic_y[i] <= (valid_y[j] + 1)))

//'@export
// [[Rcpp::export]]
Rcpp::DataFrame validat(Rcpp::DataFrame valid, Rcpp::DataFrame predic) {
  
  Rcpp::DataFrame df;
  
  Validation val(valid, predic);
  val.make();
  return val.makeValid();

  
  // int predic_x_i;
  // int predic_y_i;
  // int valid_x_i;
  // int valid_y_i;
  // int pred_col_i;
  // Rcpp::NumericVector predic_x;
  // Rcpp::NumericVector predic_y;
  // Rcpp::NumericVector valid_x;
  // Rcpp::NumericVector valid_y;
  // Rcpp::StringVector pred_col;
  // 
  // Rcpp::NumericVector match_xcoord;
  // Rcpp::NumericVector match_ycoord;
  // Rcpp::StringVector match_col;
  // 
  // 
  // search_coord(predic,predic_x_i, predic_y_i);
  // search_coord(valid, valid_x_i, valid_y_i);
  // search_predic(predic, pred_col_i);
  // if (predic_x_i == -1){
  //   Rcpp::Rcout << "No column named X was found" << std::endl;
  //   return NULL;
  // }
  // if (predic_y_i == -1){
  //   Rcpp::Rcout << "No column named X was found" << std::endl;
  //   return NULL;
  // }
  // if (valid_x_i == -1){
  //   Rcpp::Rcout << "No column named X was found" << std::endl;
  //   return NULL;
  // }
  // if (valid_y_i == -1){
  //   Rcpp::Rcout << "No column named X was found" << std::endl;
  //   return NULL;
  // }
  // if (pred_col_i == -1){
  //   Rcpp::Rcout << "No column named Prediction was found" << std::endl;
  //   return NULL;
  // }
  // 
  // predic_x = predic[predic_x_i];
  // predic_y = predic[predic_y_i];
  // valid_x = valid[valid_x_i];
  // valid_y = valid[valid_y_i];
  // pred_col = predic[pred_col_i];
  // 
  // for (int i = 0; i < predic_x.size(); ++i) {
  //   for (int j = 0; j < valid_x.size(); ++j){
  // 
  //     if (IF_X_IN_RANGE && IF_Y_IN_RANGE) {
  //       match_xcoord.push_back(predic_x[i]);
  //       match_ycoord.push_back(predic_y[i]);
  //       match_col.push_back(pred_col[i]);
  //     }
  //   }
  // }
  // 
  // Rcpp::DataFrame df = Rcpp::DataFrame::create(Rcpp::Named("X") = match_xcoord, Rcpp::Named("Y") = match_ycoord, Rcpp::Named("Matches") = match_col);
  // 
  // return df;
  }
